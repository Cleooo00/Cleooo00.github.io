<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CleFke&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haoyuliugh.github.io/"/>
  <updated>2020-05-07T09:47:46.628Z</updated>
  <id>http://haoyuliugh.github.io/</id>
  
  <author>
    <name>CleFke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汇编中变址寻址操作易错点</title>
    <link href="http://haoyuliugh.github.io/2020/05/07/%E6%B1%87%E7%BC%96%E4%B8%AD%E5%8F%98%E5%9D%80%E5%AF%BB%E5%9D%80%E6%93%8D%E4%BD%9C%E6%98%93%E9%94%99%E7%82%B9/"/>
    <id>http://haoyuliugh.github.io/2020/05/07/汇编中变址寻址操作易错点/</id>
    <published>2020-05-07T09:05:18.000Z</published>
    <updated>2020-05-07T09:47:46.628Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><blockquote><p>在汇编语言中，针对数组操作，可以使用间接寻址，或者变址寻址。在变址寻址操作时，遇到了一系列问题，遂做总结，避免再犯。</p></blockquote><a id="more"></a><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>有一个带有8个WORD型数据的数组，想要对其偶数项进行求和</p></blockquote><h4 id="间接寻址方法"><a href="#间接寻址方法" class="headerlink" title="间接寻址方法"></a>间接寻址方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">; Operators (Operator.asm)</span><br><span class="line"></span><br><span class="line">; Demonstrates the TYPE, LENGTHOF, and SIZEOF operators</span><br><span class="line"></span><br><span class="line">.386</span><br><span class="line">.model flat,stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO,stdcall:dword</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">arrofw WORD 1,2,1,2,1,2,1,2 ;数据中，偶数序求和结果为2*4，奇数序求和为1*4</span><br><span class="line">sum WORD 0</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main PROC</span><br><span class="line">mov EDI,OFFSET arrofw     </span><br><span class="line">add EDI,2                 ;现在指向第二个数据</span><br><span class="line">mov ECX,LENGTHOF arrofw   </span><br><span class="line">mov AX,0</span><br><span class="line">L1:</span><br><span class="line">add AX,[EDI]              ;依次累加</span><br><span class="line">add EDI,2*TYPE arrofw     ;求偶数序，所以向后偏移</span><br><span class="line">    LOOP L1</span><br><span class="line">    mov sum,AX   </span><br><span class="line"></span><br><span class="line">invoke ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><h4 id="带比例因子的变址寻址方法"><a href="#带比例因子的变址寻址方法" class="headerlink" title="带比例因子的变址寻址方法"></a>带比例因子的变址寻址方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">; Operators (Operator.asm)</span><br><span class="line"></span><br><span class="line">; Demonstrates the TYPE, LENGTHOF, and SIZEOF operators</span><br><span class="line"></span><br><span class="line">.386</span><br><span class="line">.model flat,stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO,stdcall:dword</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">arrofw WORD 1,2,1,2,1,2,1,2 ;数据中，偶数序求和结果为2*4，奇数序求和为1*4</span><br><span class="line">sum WORD 0</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main PROC</span><br><span class="line">mov AX,0     </span><br><span class="line">movESI,1    </span><br><span class="line">mov ECX,LENGTHOF arrofw</span><br><span class="line">L1:</span><br><span class="line">add AX,arrofw[ESI*TYPE arrofw]  ;依次累加</span><br><span class="line">add ESI,2                      ;求偶数序，所以每次加2</span><br><span class="line">    LOOP L1</span><br><span class="line">    mov sum,AX</span><br><span class="line"></span><br><span class="line">invoke ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><h4 id="犯的错误"><a href="#犯的错误" class="headerlink" title="犯的错误"></a>犯的错误</h4><blockquote><ul><li>在使用寄存器时，没有考虑数据类型为WORD型，应该使用16位寄存器AX，而不是32位的EAX等等寄存器；</li><li>为什么又使用了EDI，ESI等寄存器？因为在OFFSET指令中，返回的地址一半为32位的，所以用32位的EDI寄存器来存；ESI同理。 <strong>这里不能用DI或者SI</strong></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在汇编语言中，针对数组操作，可以使用间接寻址，或者变址寻址。在变址寻址操作时，遇到了一系列问题，遂做总结，避免再犯。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="汇编语言" scheme="http://haoyuliugh.github.io/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="易错点" scheme="http://haoyuliugh.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="间接寻址" scheme="http://haoyuliugh.github.io/tags/%E9%97%B4%E6%8E%A5%E5%AF%BB%E5%9D%80/"/>
    
      <category term="带比例因子的变址寻址" scheme="http://haoyuliugh.github.io/tags/%E5%B8%A6%E6%AF%94%E4%BE%8B%E5%9B%A0%E5%AD%90%E7%9A%84%E5%8F%98%E5%9D%80%E5%AF%BB%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>围棋算法</title>
    <link href="http://haoyuliugh.github.io/2019/09/21/%E5%9B%B4%E6%A3%8B%E7%AE%97%E6%B3%95/"/>
    <id>http://haoyuliugh.github.io/2019/09/21/围棋算法/</id>
    <published>2019-09-21T10:14:04.000Z</published>
    <updated>2020-05-07T08:58:50.438Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><blockquote><p>围棋是世界范围内非常流行的棋类运动，是竞技体育项目。围棋的规则非常简单，做为编程初学者逻辑思维训练非常合适。<br> 标准围棋棋盘是19行19列。为了简化起见，此处简化成9行9列。<br> 标准围棋对弈方法是黑方和白方轮番下棋，为了简化，本算法引擎，支持任意的落子顺序，即落子顺序由程序输入<br> 输入(棋子角色，棋子行号，棋子列号)<br>​        1 2 3<br>      表示白子放第2行第3列<br>      2 3 3<br>      表示黑子放第3行第3列<br>      本算法引擎实现的是。从落子序列到棋盘状态的映射，当落子完成后，输出最终的棋盘状态。<br>      +代表空白，o代表白棋，#代表黑棋<br>      例如<br> 1 1 1<br> 1 1 2<br> 1 2 1<br> 1 2 2<br> 输出<br> 四颗白子形成的正方形状<br> 围棋对战算法引擎需要实现各种围棋规则(提子，禁入点，反扑，劫)。具体的规则示意图请自行网上查阅。 </p></blockquote><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><blockquote><p> 输入：</p><p> 1 1 1<br> 2 2 2 </p><p>输出：</p><p>​       1  2  3  4  5  6  7  8  9<br>  1   o  +  +  +  +  +  +  +  +<br>  2   +  #  +  +  +  +  +  +  +<br>  3   +  +  +  +  +  +  +  +  +<br>  4   +  +  +  +  +  +  +  +  +<br>  5   +  +  +  +  +  +  +  +  +<br>  6   +  +  +  +  +  +  +  +  +<br>  7   +  +  +  +  +  +  +  +  +<br>  8   +  +  +  +  +  +  +  +  +<br>  9   +  +  +  +  +  +  +  +  +</p></blockquote><h4 id="逻辑思路"><a href="#逻辑思路" class="headerlink" title="逻辑思路"></a>逻辑思路</h4><blockquote><ol><li><p>输入数据后，判断该位置是否为空，空位可落子</p></li><li><p>每次输入数据时调用jieInit（）函数初始化，（用一个数组单独记录棋盘上一轮被提走的棋子的位置）</p></li><li><p>调用judgeLive（）函数判断自己落子的位置是否会处于自杀状态</p><p> （1）如果是，则调用chessAnotherJudge（）函数判断周围是否有敌方棋子即将被杀（反扑）</p><p> ​         a.如果是，则执行反扑chessAnotherClear（）（寻找并清除周围敌方濒死棋子）<br> ​         b.如果否，则该点为禁入点，不可落子<br> ​（2）如果否，则直接判断周围是否有敌方棋子即将被杀，并视情况执行清除敌方命令</p></li><li><p>打劫，每次有棋子被提走后，jie[][]会记录提走的位置，并将记录保存到下一次输入后，在下一次输入判断时，会直接判断是否为劫</p></li></ol></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt; <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">&gt; <span class="comment">/*---------------------全局变量------------------*/</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">int</span> chessData[<span class="number">9</span>][<span class="number">9</span>];     <span class="comment">//定义每个位置状态，0为空，1为白，2为黑</span></span><br><span class="line">&gt; <span class="keyword">const</span> <span class="keyword">char</span> chessChar[<span class="number">3</span>]&#123; <span class="string">'+'</span>,<span class="string">'o'</span>,<span class="string">'#'</span> &#125;;</span><br><span class="line">&gt; <span class="keyword">bool</span> jie[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*---------------------函数-------------------*/</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*打印棋盘*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">showChessBoard</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="built_in">cout</span> &lt;&lt; <span class="string">"   "</span>;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="built_in">cout</span> &lt;&lt; <span class="string">"  "</span> &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"   "</span>;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">int</span> data = chessData[i][j];</span><br><span class="line">&gt; <span class="built_in">cout</span> &lt;&lt; chessChar[data] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*寻找相反状态*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">int</span> <span class="title">anotherRole</span><span class="params">(<span class="keyword">int</span> qi)</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">if</span> (qi == <span class="number">1</span>)</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&gt; <span class="keyword">if</span> (qi == <span class="number">2</span>)</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*具体执行递归判定*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">bool</span> <span class="title">judgeNeigbourLive</span><span class="params">(<span class="keyword">int</span> role, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">bool</span> footprint[])</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= <span class="number">9</span> || y &lt; <span class="number">0</span> || y &gt;= <span class="number">9</span>)<span class="comment">//如果我超界，返回false</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (footprint[x * <span class="number">9</span> + y] == <span class="literal">true</span>)      <span class="comment">//如果我来过这个地方，返回false，不在判断</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessData[x][y] == <span class="number">0</span>)              <span class="comment">//如果我为空，则邻居必定存活，即有气</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessData[x][y] == anotherRole(role))<span class="comment">//如果我跟邻居的状态不同，则不判断</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; footprint[x * <span class="number">9</span> + y] = <span class="literal">true</span>;<span class="comment">//每次判断完一个位置后就把该位置设为true，表示来过</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//如果我跟邻居的状态相同，则递归判断邻居</span></span><br><span class="line">&gt; <span class="keyword">return</span> judgeNeigbourLive(role, x - <span class="number">1</span>, y, footprint)</span><br><span class="line">&gt; || judgeNeigbourLive(role, x + <span class="number">1</span>, y, footprint)</span><br><span class="line">&gt; || judgeNeigbourLive(role, x, y - <span class="number">1</span>, footprint)</span><br><span class="line">&gt; || judgeNeigbourLive(role, x, y + <span class="number">1</span>, footprint);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*递归判定是否存活*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">bool</span> <span class="title">judgeLive</span><span class="params">(<span class="keyword">int</span> role, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">bool</span> footprint[<span class="number">9</span> * <span class="number">9</span>] = &#123; <span class="literal">false</span> &#125;;  <span class="comment">//用足迹记录下每一次走过的位置，避免重复判定引起无穷递归</span></span><br><span class="line">&gt; <span class="keyword">return</span> judgeNeigbourLive(role, x - <span class="number">1</span>, y, footprint)</span><br><span class="line">&gt; || judgeNeigbourLive(role, x + <span class="number">1</span>, y, footprint)</span><br><span class="line">&gt; || judgeNeigbourLive(role, x, y - <span class="number">1</span>, footprint)</span><br><span class="line">&gt; || judgeNeigbourLive(role, x, y + <span class="number">1</span>, footprint);</span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*清除传入点周围的敌方棋子*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">chessClear</span><span class="params">(<span class="keyword">int</span> qi, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//递归寻找所有相同状态的点并将其提起</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessData[x - <span class="number">1</span>][y] == qi)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessData[x - <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">&gt; jie[x - <span class="number">1</span>][y] = <span class="literal">true</span>;</span><br><span class="line">&gt; chessClear(qi, x - <span class="number">1</span>, y);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessData[x + <span class="number">1</span>][y] == qi)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessData[x + <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">&gt; jie[x + <span class="number">1</span>][y] = <span class="literal">true</span>;</span><br><span class="line">&gt; chessClear(qi, x + <span class="number">1</span>, y);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessData[x][y - <span class="number">1</span>] == qi)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessData[x][y - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&gt; jie[x][y - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">&gt; chessClear(qi, x, y - <span class="number">1</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessData[x][y + <span class="number">1</span>] == qi)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessData[x][y + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&gt; jie[x][y + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">&gt; chessClear(qi, x, y + <span class="number">1</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*寻找传入点周围的濒死敌方棋子并提供信息给chessClear函数*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">chessAnotherClear</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//判断落子后邻居是否存活，若死亡，则连片提子</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">if</span> (judgeLive(chessData[x - <span class="number">1</span>][y], x - <span class="number">1</span>, y) == <span class="literal">false</span>)   <span class="comment">//如果点左边不可存活，调用函数删除与该点连成片的所有点（上下左右）</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessClear(chessData[x - <span class="number">1</span>][y], x - <span class="number">1</span>, y);</span><br><span class="line">&gt; chessData[x - <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">&gt; jie[x - <span class="number">1</span>][y] = <span class="literal">true</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (judgeLive(chessData[x + <span class="number">1</span>][y], x + <span class="number">1</span>, y) == <span class="literal">false</span>)   <span class="comment">//如果点右边不可存活，调用函数删除与该点连成片的所有点（上下左右）</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessClear(chessData[x + <span class="number">1</span>][y], x + <span class="number">1</span>, y);</span><br><span class="line">&gt; chessData[x + <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">&gt; jie[x + <span class="number">1</span>][y] = <span class="literal">true</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (judgeLive(chessData[x][y + <span class="number">1</span>], x, y + <span class="number">1</span>) == <span class="literal">false</span>)   <span class="comment">//如果点上边不可存活，调用函数删除与该点连成片的所有点（上下左右）</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessClear(chessData[x][y + <span class="number">1</span>], x, y + <span class="number">1</span>);</span><br><span class="line">&gt; chessData[x][y + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&gt; jie[x][y + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (judgeLive(chessData[x][y - <span class="number">1</span>], x, y - <span class="number">1</span>) == <span class="literal">false</span>)   <span class="comment">//如果点下边不可存活，调用函数删除与该点连成片的所有点（上下左右）</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessClear(chessData[x][y - <span class="number">1</span>], x, y - <span class="number">1</span>);</span><br><span class="line">&gt; chessData[x][y - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&gt; jie[x][y - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*判定传入点周围是否存在濒死敌方棋子*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">bool</span> <span class="title">chessAnotherJudge</span><span class="params">(<span class="keyword">int</span> qi,<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">if</span> ((judgeLive(chessData[x - <span class="number">1</span>][y], x - <span class="number">1</span>, y) == <span class="literal">false</span> &amp;&amp; chessData[x - <span class="number">1</span>][y]==anotherRole(qi))  <span class="comment">//如果四周存在必死的棋子，且必死的棋子为敌方棋子，则返回1，表示这个位置可以落子</span></span><br><span class="line">&gt; || judgeLive(chessData[x + <span class="number">1</span>][y], x + <span class="number">1</span>, y) == <span class="literal">false</span> &amp;&amp; chessData[x + <span class="number">1</span>][y] == anotherRole(qi)</span><br><span class="line">&gt; || judgeLive(chessData[x][y + <span class="number">1</span>], x, y + <span class="number">1</span>) == <span class="literal">false</span> &amp;&amp; chessData[x][y + <span class="number">1</span>] == anotherRole(qi)</span><br><span class="line">&gt; || judgeLive(chessData[x][y - <span class="number">1</span>], x, y - <span class="number">1</span>) == <span class="literal">false</span> &amp;&amp; chessData[x][y - <span class="number">1</span>] == anotherRole(qi))</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">else</span></span><br><span class="line">&gt; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*初始化jie数组*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">jieInit</span><span class="params">()</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; jie[i][j] = <span class="literal">false</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*----------------------主函数------------------------*/</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; jieInit();</span><br><span class="line">&gt; <span class="keyword">int</span> qi, x, y;</span><br><span class="line">&gt; <span class="keyword">for</span> (; <span class="built_in">cin</span> &gt;&gt; qi &gt;&gt; x &gt;&gt; y;)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessData[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; jie[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="literal">false</span>)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; jieInit();</span><br><span class="line">&gt; chessData[x - <span class="number">1</span>][y - <span class="number">1</span>] = qi;</span><br><span class="line">&gt; <span class="keyword">if</span> (judgeLive(qi, x - <span class="number">1</span>, y - <span class="number">1</span>) == <span class="literal">true</span>) <span class="comment">//如果自己可以存活</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessAnotherClear(x - <span class="number">1</span>, y - <span class="number">1</span>); <span class="comment">//寻找并清除敌方无气子</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (judgeLive(qi, x - <span class="number">1</span>, y - <span class="number">1</span>) == <span class="literal">false</span>) <span class="comment">//如果自己不可存活</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessAnotherJudge(qi,x - <span class="number">1</span>, y - <span class="number">1</span>) == <span class="number">0</span>) <span class="comment">//如果周围可以存活，则禁入</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessData[x - <span class="number">1</span>][y - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">if</span> (chessAnotherJudge(qi,x - <span class="number">1</span>, y - <span class="number">1</span>) == <span class="number">1</span>) <span class="comment">//如果周围不可存活，则提子</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; chessAnotherClear( x - <span class="number">1</span>, y - <span class="number">1</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; showChessBoard();</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;围棋是世界范围内非常流行的棋类运动，是竞技体育项目。围棋的规则非常简单，做为编程初学者逻辑思维训练
      
    
    </summary>
    
      <category term="算法" scheme="http://haoyuliugh.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前端部分基础知识</title>
    <link href="http://haoyuliugh.github.io/2019/09/02/%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://haoyuliugh.github.io/2019/09/02/前端部分基础知识/</id>
    <published>2019-09-02T13:07:34.000Z</published>
    <updated>2020-05-07T08:58:26.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="doctype-html的作用"><a href="#doctype-html的作用" class="headerlink" title="doctype html的作用"></a>doctype html的作用</h4><blockquote><p>它是html5标准网页声明,告诉浏览器用最新的 HTML5标准来解析渲染页面；如果不写，浏览器就会进入混杂模式。而混杂模式指的是浏览器用自己的方式解析代码，页面会以一种兼容的方式来显示。混杂模式一般会模拟老站点的行为以防止老站点无法工作。</p></blockquote><a id="more"></a><h4 id="常见的meta标签的含义"><a href="#常见的meta标签的含义" class="headerlink" title="常见的meta标签的含义"></a>常见的meta标签的含义</h4><blockquote><ul><li><p>指定所用的字符集</p><p><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p></li><li><p>向搜索引擎说明网页的搜索关键词</p><p><code>&lt;meta name=&quot;keywords&quot; content=&quot;啦啦啦&quot;&gt;</code></p></li><li><p>向搜索引擎说明站点的主要内容</p><p><code>&lt;meta name=&quot;description&quot; content=&quot;啦啦啦&quot;&gt;</code></p></li><li><p>向搜索引擎说明站点的作者</p><p><code>&lt;meta name=&quot;author&quot; content=&quot;CleFke*^▽^*&quot;&gt;</code></p></li><li><p>浏览器的内核控制</p><p><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit|ie-comp|ie-stand&quot;&gt;</code></p></li></ul></blockquote><h4 id="常见的浏览器的内核"><a href="#常见的浏览器的内核" class="headerlink" title="常见的浏览器的内核"></a>常见的浏览器的内核</h4><blockquote><ul><li>普通的<em>IE浏览器<em>使用的是</em>Trident</em></li><li><em>Firefox<em>使用的是</em>Gecko</em></li><li><em>opera<em>使用的是</em>Presto<em>，以及后面的</em>Blink</em></li><li><em>Safari<em>以及</em>Chrome<em>使用的是</em>WebKit</em></li></ul></blockquote><h4 id="常见的标签以及含义"><a href="#常见的标签以及含义" class="headerlink" title="常见的标签以及含义"></a>常见的标签以及含义</h4><table><thead><tr><th align="center">标签</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>&lt;html&gt;</code></td><td align="center">HTML页面根元素</td></tr><tr><td align="center"><code>&lt;head&gt;</code></td><td align="center">文档的头部</td></tr><tr><td align="center"><code>&lt;meta&gt;</code></td><td align="center">为机器提供元数据，告诉机器如何解析</td></tr><tr><td align="center"><code>&lt;title&gt;</code></td><td align="center">文档的标题</td></tr><tr><td align="center"><code>&lt;body&gt;</code></td><td align="center">文档的内容</td></tr><tr><td align="center"><code>&lt;div&gt;</code></td><td align="center">块级元素，容器</td></tr><tr><td align="center"><code>&lt;h1&gt;</code></td><td align="center">定义一级标题，类似还有<code>&lt;h2&gt;</code>等</td></tr><tr><td align="center"><code>&lt;p&gt;</code></td><td align="center">定义一个段落</td></tr><tr><td align="center"><code>&lt;a&gt;</code></td><td align="center">定义一个链接，格式为<code>&lt;a href=&quot;网址&quot;&gt;</code></td></tr><tr><td align="center"><code>&lt;span&gt;</code></td><td align="center">内联元素，可用作文本的容器</td></tr><tr><td align="center"><code>&lt;u&gt;</code></td><td align="center">下划线标签</td></tr><tr><td align="center"><code>&lt;em&gt;</code></td><td align="center">强调标签</td></tr><tr><td align="center"><code>&lt;strong&gt;</code></td><td align="center">加重标签</td></tr><tr><td align="center"><code>&lt;table&gt;</code></td><td align="center">表格标签</td></tr><tr><td align="center"><code>&lt;tr&gt;</code></td><td align="center">表格中的行</td></tr><tr><td align="center"><code>&lt;td&gt;</code></td><td align="center">表格中的单元格</td></tr><tr><td align="center"><code>&lt;th&gt;</code></td><td align="center">表格的表头</td></tr><tr><td align="center"><code>&lt;tbody&gt;</code></td><td align="center">表格的主体</td></tr><tr><td align="center"><code>&lt;tfoot&gt;</code></td><td align="center">表格的页脚</td></tr><tr><td align="center"><code>&lt;ol&gt;</code></td><td align="center">有序列表标签</td></tr><tr><td align="center"><code>&lt;ul&gt;</code></td><td align="center">无序列表标签</td></tr><tr><td align="center"><code>&lt;li&gt;</code></td><td align="center">定义列表项目</td></tr><tr><td align="center"><code>&lt;img&gt;</code></td><td align="center">插入图片，格式为<code>&lt;img src=&quot;图片地址&quot;&gt;</code></td></tr><tr><td align="center"><code>&lt;br&gt;</code></td><td align="center">换行标签</td></tr><tr><td align="center"><code>&lt;input&gt;</code></td><td align="center">输入控件标签</td></tr><tr><td align="center"><code>&lt;i&gt;</code></td><td align="center">斜体字标签</td></tr><tr><td align="center"><code>&lt;hr&gt;</code></td><td align="center">水平线标签</td></tr><tr><td align="center"><code>&lt;iframe&gt;</code></td><td align="center">定义内联框架</td></tr><tr><td align="center"><code>&lt;cite&gt;</code></td><td align="center">定义作品标题</td></tr><tr><td align="center"><code>&lt;button&gt;</code></td><td align="center">按钮标签</td></tr><tr><td align="center"><code>&lt;b&gt;</code></td><td align="center">粗体字标签</td></tr><tr><td align="center"><code>&lt;form&gt;</code></td><td align="center">定义供用户输入的表单</td></tr><tr><td align="center"><code>&lt;caption&gt;</code></td><td align="center">定义表标题</td></tr><tr><td align="center"><code>&lt;footer&gt;</code></td><td align="center">定义文档页脚</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;doctype-html的作用&quot;&gt;&lt;a href=&quot;#doctype-html的作用&quot; class=&quot;headerlink&quot; title=&quot;doctype html的作用&quot;&gt;&lt;/a&gt;doctype html的作用&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;它是html5标准网页声明,告诉浏览器用最新的 HTML5标准来解析渲染页面；如果不写，浏览器就会进入混杂模式。而混杂模式指的是浏览器用自己的方式解析代码，页面会以一种兼容的方式来显示。混杂模式一般会模拟老站点的行为以防止老站点无法工作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://haoyuliugh.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="基础知识" scheme="http://haoyuliugh.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>一些莫名其妙的东西</title>
    <link href="http://haoyuliugh.github.io/2019/08/31/%E4%B8%80%E4%BA%9B%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>http://haoyuliugh.github.io/2019/08/31/一些莫名其妙的东西/</id>
    <published>2019-08-31T14:35:25.000Z</published>
    <updated>2020-05-07T08:59:05.004Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>在室友的怂恿下，莫名其妙的有了搭建blog的想法，就首先感谢下铺的<a href="http://129.204.15.68/" target="_blank" rel="noopener">大哥</a>的支持。由于一些众所周知的原因（没钱）这个小站基于Hexo+GitHub搭建。平时主要用来发表一些文章，一点感悟。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;p&gt;在室友的怂恿下，莫名其妙的有了搭建blog的想法，就首先感谢下铺的&lt;a href=&quot;http://129.204.15.68
      
    
    </summary>
    
      <category term="杂项" scheme="http://haoyuliugh.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
</feed>
